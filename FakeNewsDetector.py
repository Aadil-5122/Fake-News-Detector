{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:14:52.364446Z\",\"iopub.execute_input\":\"2023-04-17T07:14:52.365123Z\",\"iopub.status.idle\":\"2023-04-17T07:14:52.406922Z\",\"shell.execute_reply.started\":\"2023-04-17T07:14:52.365066Z\",\"shell.execute_reply\":\"2023-04-17T07:14:52.405722Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [markdown]\n# **Importing the Required Libraries**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:14:52.408945Z\",\"iopub.execute_input\":\"2023-04-17T07:14:52.409284Z\",\"iopub.status.idle\":\"2023-04-17T07:14:53.802474Z\",\"shell.execute_reply.started\":\"2023-04-17T07:14:52.409252Z\",\"shell.execute_reply\":\"2023-04-17T07:14:53.800911Z\"}}\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nimport re\nimport string\n\n# %% [markdown]\n# **Storing the Data into a DataFrame**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:14:53.804308Z\",\"iopub.execute_input\":\"2023-04-17T07:14:53.804656Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.135216Z\",\"shell.execute_reply.started\":\"2023-04-17T07:14:53.804621Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.133782Z\"}}\ndf = pd.read_csv(\"/kaggle/input/fake-news-detection-78k/fake_real_news_78k.csv\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.138304Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.139274Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.172399Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.139221Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.170913Z\"}}\ndf.head()\n\n# %% [markdown]\n# **Separating the Combined Data (Grouping By their Labels)**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.173921Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.174360Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.212437Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.174314Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.211102Z\"}}\ndf_False, df_True = [x for _, x in df.groupby(df['label'] == \"TRUE\")]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.215850Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.216219Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.223468Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.216183Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.222135Z\"}}\ndf_True.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.225051Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.225369Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.239247Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.225338Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.237947Z\"}}\ndf_False.shape\n\n# %% [markdown]\n# **Assigning the DataFrames their Classes**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.240655Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.241019Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.251517Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.240984Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.250325Z\"}}\ndf_False[\"class\"] = 0\ndf_True[\"class\"] = 1\n\n# %% [markdown]\n# **Merging them as the labelling is done**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.255446Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.255798Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.286255Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.255765Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.285002Z\"}}\ndf_merge = pd.concat([df_False, df_True], axis =0 )\ndf_merge.head(10)\n#df_merge.tail(10)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.287598Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.288762Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.295936Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.288719Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.294700Z\"}}\ndf_merge.columns\n\n# %% [markdown]\n# **Dropping the Un-necessary Columns**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.297378Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.297852Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.315480Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.297794Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.313937Z\"}}\ndf_merge_drop = df_merge.drop([\"Unnamed: 0\",\"title\",\"label\"], axis=1)\n\n# %% [markdown]\n# **Finding the number of \"NULL\" values in the DataSet**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.317379Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.318234Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.341440Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.318164Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.339997Z\"}}\ndf_merge_drop.isnull().sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.344955Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.345509Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.370902Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.345458Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.369760Z\"}}\ndf_merge_drop = df_merge_drop.sample(frac = 1)\ndf_merge_drop.head(10)\n\n# %% [markdown]\n# **Arranging the DataSet according to index**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.372122Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.372456Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.386081Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.372425Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.384730Z\"}}\ndf_merge_drop.reset_index(inplace = True)\ndf_merge_drop.drop([\"index\"], axis = 1, inplace = True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.388004Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.388633Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.399096Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.388581Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.398072Z\"}}\ndf_merge_drop.columns\ndf_merge_drop.head()\n\n# %% [markdown]\n# **Defining Text Pre-Processing using \"Regular Expression\" (RegEx)**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.400094Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.400449Z\",\"iopub.status.idle\":\"2023-04-17T07:15:01.412156Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.400395Z\",\"shell.execute_reply\":\"2023-04-17T07:15:01.410947Z\"}}\ndef wordopt(text):\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub(\"\\\\W\",\" \",text) \n    text = re.sub('https?://\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)    \n    return text\n\n# %% [markdown]\n# **Removing the Numeric Data from the Dataset, so that the can be fed to the Model**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:15:01.413248Z\",\"iopub.execute_input\":\"2023-04-17T07:15:01.413579Z\",\"iopub.status.idle\":\"2023-04-17T07:17:35.067310Z\",\"shell.execute_reply.started\":\"2023-04-17T07:15:01.413547Z\",\"shell.execute_reply\":\"2023-04-17T07:17:35.066235Z\"}}\nfrom string import digits\n\nfor i in range(0,len(df_merge_drop)):\n    remove_digits = str.maketrans('', '', digits)\n    ini_string=str(df_merge_drop[\"text\"][i])\n    df_merge_drop[\"text\"][i] = ini_string.translate(remove_digits)\n\n# %% [markdown]\n# **Applying Text Pre-Processing using \"Regular Expression\" (RegEx)**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:17:35.068893Z\",\"iopub.execute_input\":\"2023-04-17T07:17:35.069204Z\",\"iopub.status.idle\":\"2023-04-17T07:18:24.093135Z\",\"shell.execute_reply.started\":\"2023-04-17T07:17:35.069173Z\",\"shell.execute_reply\":\"2023-04-17T07:18:24.091366Z\"}}\ndf_merge_drop[\"text\"] = df_merge_drop[\"text\"].apply(wordopt)\n\n# %% [markdown]\n# **Assigning 'x' and 'y' the columns from the DataSet**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:18:24.095140Z\",\"iopub.execute_input\":\"2023-04-17T07:18:24.095505Z\",\"iopub.status.idle\":\"2023-04-17T07:18:24.101669Z\",\"shell.execute_reply.started\":\"2023-04-17T07:18:24.095470Z\",\"shell.execute_reply\":\"2023-04-17T07:18:24.100310Z\"}}\nx = df_merge_drop[\"text\"]\ny = df_merge_drop[\"class\"]\n\n# %% [markdown]\n# **Performing Train-Test Split**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:18:24.103186Z\",\"iopub.execute_input\":\"2023-04-17T07:18:24.103638Z\",\"iopub.status.idle\":\"2023-04-17T07:18:24.134164Z\",\"shell.execute_reply.started\":\"2023-04-17T07:18:24.103592Z\",\"shell.execute_reply\":\"2023-04-17T07:18:24.132721Z\"}}\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)\n\n# %% [markdown]\n# **Importing TFIDF Vectorizer to Encode the Text Data**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:18:24.136050Z\",\"iopub.execute_input\":\"2023-04-17T07:18:24.136418Z\",\"iopub.status.idle\":\"2023-04-17T07:19:00.131523Z\",\"shell.execute_reply.started\":\"2023-04-17T07:18:24.136383Z\",\"shell.execute_reply\":\"2023-04-17T07:19:00.130389Z\"}}\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorization = TfidfVectorizer()\nxv_train = vectorization.fit_transform(x_train)\nxv_test = vectorization.transform(x_test)\n\n# %% [markdown]\n# **Prediction using 'LOGISTIC REGRESSION'**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:19:00.132867Z\",\"iopub.execute_input\":\"2023-04-17T07:19:00.133194Z\",\"iopub.status.idle\":\"2023-04-17T07:19:26.747960Z\",\"shell.execute_reply.started\":\"2023-04-17T07:19:00.133163Z\",\"shell.execute_reply\":\"2023-04-17T07:19:26.746705Z\"}}\nfrom sklearn.linear_model import LogisticRegression\n\nLR = LogisticRegression()\nLR.fit(xv_train,y_train)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:19:26.749993Z\",\"iopub.execute_input\":\"2023-04-17T07:19:26.750860Z\",\"iopub.status.idle\":\"2023-04-17T07:19:26.788892Z\",\"shell.execute_reply.started\":\"2023-04-17T07:19:26.750794Z\",\"shell.execute_reply\":\"2023-04-17T07:19:26.787127Z\"}}\npred_lr=LR.predict(xv_test)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:19:26.799126Z\",\"iopub.execute_input\":\"2023-04-17T07:19:26.800388Z\",\"iopub.status.idle\":\"2023-04-17T07:19:26.836967Z\",\"shell.execute_reply.started\":\"2023-04-17T07:19:26.800337Z\",\"shell.execute_reply\":\"2023-04-17T07:19:26.835663Z\"}}\nLR.score(xv_test, y_test)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:19:26.838961Z\",\"iopub.execute_input\":\"2023-04-17T07:19:26.839725Z\",\"iopub.status.idle\":\"2023-04-17T07:19:26.882137Z\",\"shell.execute_reply.started\":\"2023-04-17T07:19:26.839674Z\",\"shell.execute_reply\":\"2023-04-17T07:19:26.881087Z\"}}\nprint(classification_report(y_test, pred_lr))\n\n# %% [markdown]\n# **Prediction using 'DECISION TREE'**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:19:26.883250Z\",\"iopub.execute_input\":\"2023-04-17T07:19:26.883788Z\",\"iopub.status.idle\":\"2023-04-17T07:25:08.135470Z\",\"shell.execute_reply.started\":\"2023-04-17T07:19:26.883752Z\",\"shell.execute_reply\":\"2023-04-17T07:25:08.134193Z\"}}\nfrom sklearn.tree import DecisionTreeClassifier\n\nDT = DecisionTreeClassifier()\nDT.fit(xv_train, y_train)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:25:08.137182Z\",\"iopub.execute_input\":\"2023-04-17T07:25:08.137700Z\",\"iopub.status.idle\":\"2023-04-17T07:25:08.320531Z\",\"shell.execute_reply.started\":\"2023-04-17T07:25:08.137626Z\",\"shell.execute_reply\":\"2023-04-17T07:25:08.319385Z\"}}\npred_dt = DT.predict(xv_test)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:25:08.322368Z\",\"iopub.execute_input\":\"2023-04-17T07:25:08.322899Z\",\"iopub.status.idle\":\"2023-04-17T07:25:08.387630Z\",\"shell.execute_reply.started\":\"2023-04-17T07:25:08.322843Z\",\"shell.execute_reply\":\"2023-04-17T07:25:08.385658Z\"}}\nDT.score(xv_test, y_test)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:25:08.389726Z\",\"iopub.execute_input\":\"2023-04-17T07:25:08.390125Z\",\"iopub.status.idle\":\"2023-04-17T07:25:08.434369Z\",\"shell.execute_reply.started\":\"2023-04-17T07:25:08.390089Z\",\"shell.execute_reply\":\"2023-04-17T07:25:08.433312Z\"}}\nprint(classification_report(y_test, pred_dt))\n\n# %% [markdown]\n# **Prediction using 'GRADIENT BOOSTING'**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:25:08.435939Z\",\"iopub.execute_input\":\"2023-04-17T07:25:08.436320Z\",\"iopub.status.idle\":\"2023-04-17T07:38:55.248279Z\",\"shell.execute_reply.started\":\"2023-04-17T07:25:08.436285Z\",\"shell.execute_reply\":\"2023-04-17T07:38:55.246860Z\"}}\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nGBC = GradientBoostingClassifier(random_state=0)\nGBC.fit(xv_train, y_train)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:38:55.250206Z\",\"iopub.execute_input\":\"2023-04-17T07:38:55.250704Z\",\"iopub.status.idle\":\"2023-04-17T07:38:55.364678Z\",\"shell.execute_reply.started\":\"2023-04-17T07:38:55.250651Z\",\"shell.execute_reply\":\"2023-04-17T07:38:55.362855Z\"}}\npred_gbc = GBC.predict(xv_test)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:38:55.366656Z\",\"iopub.execute_input\":\"2023-04-17T07:38:55.367203Z\",\"iopub.status.idle\":\"2023-04-17T07:38:55.481287Z\",\"shell.execute_reply.started\":\"2023-04-17T07:38:55.367147Z\",\"shell.execute_reply\":\"2023-04-17T07:38:55.479532Z\"}}\nGBC.score(xv_test, y_test)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:38:55.483596Z\",\"iopub.execute_input\":\"2023-04-17T07:38:55.484334Z\",\"iopub.status.idle\":\"2023-04-17T07:38:55.526454Z\",\"shell.execute_reply.started\":\"2023-04-17T07:38:55.484275Z\",\"shell.execute_reply\":\"2023-04-17T07:38:55.524901Z\"}}\nprint(classification_report(y_test, pred_gbc))\n\n# %% [markdown]\n# **Prediction using 'RANDOM FOREST'**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-17T07:38:55.528580Z\",\"iopub.execute_input\":\"2023-04-17T07:38:55.529128Z\"}}\nfrom sklearn.ensemble import RandomForestClassifier\n\nRFC = RandomForestClassifier(random_state=0)\nRFC.fit(xv_train, y_train)\n\n# %% [code]\npred_rfc = RFC.predict(xv_test)\n\n# %% [code]\nRFC.score(xv_test, y_test)\n\n# %% [code]\nprint(classification_report(y_test, pred_rfc))\n\n# %% [markdown]\n# **Performing the Manual Testing of Models using the 'news' input by the User**\n\n# %% [code]\ndef output_lable(n):\n    if n == 1:\n        return \"Fake News\"\n    elif n == 0:\n        return \"Not A Fake News\"\n    \ndef manual_testing(news):\n    testing_news = {\"text\":[news]}\n    new_def_test = pd.DataFrame(testing_news)\n    new_def_test[\"text\"] = new_def_test[\"text\"].apply(wordopt) \n    new_x_test = new_def_test[\"text\"]\n    new_xv_test = vectorization.transform(new_x_test)\n    pred_LR = LR.predict(new_xv_test)\n    pred_RFC = RFC.predict(new_xv_test)\n    pred_GBC = GBC.predict(new_xv_test)\n    pred_DT = DT.predict(new_xv_test)\n\n    print(\"\\n\\nLR Prediction: {}\".format(output_lable(pred_LR[0])))\n    print(\"\\n\\nRFC Prediction: {}\".format(output_lable(pred_RFC[0])))\n    print(\"\\n\\nGBC Prediction: {}\".format(output_lable(pred_GBC[0])))\n    print(\"\\n\\nDT Prediction: {}\".format(output_lable(pred_DT[0])))\n\n# %% [code]\n#news = str(input())\nnews = \" Indian Politics is a complex and diverse system that encompasses a range of political ideologies, parties, and interests, with the potential to significantly impact the nation's social, economic, and geopolitical landscape. The Indian political system is based on a federal parliamentary democratic model, with power being distributed between the central government and the various state governments. Political parties play a crucial role in shaping the nation's policies and governance, with the Indian National Congress and the Bharatiya Janata Party being two of the most prominent political parties in the country. However, Indian politics also faces various challenges such as corruption, caste-based politics, communal tensions, and regionalism, which often pose significant obstacles to effective governance and political stability.\"\nmanual_testing(news)","metadata":{"_uuid":"f32fe4d4-8144-431f-a479-a670a576d183","_cell_guid":"a82730eb-459b-4359-b426-22e447744b53","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}